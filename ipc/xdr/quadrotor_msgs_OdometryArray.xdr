%{
#include <ipc_bridge/msgs/std_msgs_Header.h>
#include <ipc_bridge/msgs/nav_msgs_Odometry.h>
%}

ipc_type std_msgs_Header;
ipc_type nav_msgs_Odometry;

struct quadrotor_msgs_OdometryArray
{
 std_msgs_Header header;
 unsigned int odoms_length;
 nav_msgs_Odometry odoms<>;

%{
  quadrotor_msgs_OdometryArray() : odoms_length(0), odoms(0) {}
  quadrotor_msgs_OdometryArray(const quadrotor_msgs_OdometryArray& msg) :
    header(msg.header), odoms_length(msg.odoms_length)
  {
    odoms = 0;
    if (msg.odoms_length > 0)
    {
      odoms = new nav_msgs_Odometry[msg.odoms_length];
      for (unsigned int i = 0; i < msg.odoms_length; i++)
        odoms[i] = msg.odoms[i];
    }
  }
  ~quadrotor_msgs_OdometryArray()
  {
    if (odoms != 0)
      delete[] odoms;
    odoms = 0;
  }
  quadrotor_msgs_OdometryArray& operator= (const quadrotor_msgs_OdometryArray& msg)
  {
    header = msg.header;
    odoms_length = msg.odoms_length;

    if (odoms != 0)
      delete[] odoms;

    if (msg.odoms_length > 0)
    {
      odoms = new nav_msgs_Odometry[msg.odoms_length];
      for (unsigned int i = 0; i < msg.odoms_length; i++)
        odoms[i] = msg.odoms[i];
    }
    else
      odoms = 0;

    return *this;
  }
%}
};

%{
namespace ipc_bridge
{
    namespace quadrotor_msgs
    {
        typedef quadrotor_msgs_OdometryArray OdometryArray;
    }
}
%}
